
C# Notes

Data Types
  1> value Type 2> Reference type
 
Value Type
  int , float , bool etc are come in this category
  Value Type directly store in Stack Section
  
REefernce Type
  string , array , object are come in thos category
  Reference Type create a reference in stack but store actual value in Heap 
 
Type Casting 
changing one data type to another
Implicit : Changing samller value to larger value [Automatic]
Explicit : Changing larger value to Smaller value [Forcefully]
1> Simple Method 2>Boxing Method

1> Simple Method : short ans = (short)(num1 + num2)
2> Boxing Method :
int a;
obj i = a; [Boxing]
int b = (int)i;[Unboxing]

We can assign null to only refernce type 
We cannot assign null to the value type
  We need to do it forcefully
  int? a = null;(valid)
  
  int b = a ?? 20 ; If a is not null it will take a But If a is null then it will take 20 or anything on that place

4 methods for Method Calling
1> Call by Value : 
  If you pass a parameter in custom method and change its value then its new new value stayed in custom method it do not affect original method
  
  if you pass ref when assign at both place then custom method changed its value permanently
  
2> Call by out
  use out instead of ref but you are unable to assign a value
  
3> Call by params 
  you can use unlimited num of params :  static int Add(int a , int b, params int[] list)
  
4> Named params 
  you can pass name of parameter while calling a custom method
   main : var res = RectArea(width: 35,heigh: 85)
   RectArea(float height,float width)
   
Convert char to string : string greet = new string(letters)
vice versa : greetings.ToCharArray()

String Builder : When you change a var name then it will cretae another space in memory to store newly changed variable
But if we use string builder then it will not take new space in memory
StringBuilder sb = new StringBuilder(str);

Constructor : constructor are use to assign a default value to its static class member
>> Dot net will provide default constructor if u dont have any other type of constructor
1> Default Constructor 
  ex: int marks;
      Test(){
        this.marks = 30;
      }
      
2> Parameterize Constructor: You need to pass parameters while calling a constructor
  ex: int mrk;
    Test(int marks)
  {
    this.mrk = marks;
  }

3> Copy Constructor : It is use to copy data of one instance to another
4> Static Constructor: It is execute before the main method of the class
  It is use to define static class members in it
  If any static constructor and any other constructor is defined 
    then static constructor will execute first and then other constructor
  static Test(){
  this.maxmarks = 50;
  }
  
  
 Polymorphism /Method overloding :
 It can be use for diff datatypes 
 change in params positon
 change in sequence of parameters
 
 We dont use Method overriding so much 
 
 Operator Overloading
  +,_,<,>
  len3 = len1 + len2
public static Len  operator +(Len 1 , Len2)

  Access modifiers
  By Default all class member (data members or methods) are private
  By Default all classess in any namespace are internal (we cannot change to  private and protected)
  Private : it only be acccess in its class
  internal : it can be access anywhere in a project
  public : it can be access anywhere in one project or another
  protected : it uses concept of heritence only child class can access its parent's class data members
  
  you can use one class into another by crating its object
  
  In constructor we cannot do any logical conditions That's why we use Properties
  Properties are use for filtering data members of a class
  ex: public string Name {get,set}; => Autoimplement property
  
  C# will try to take default constructor first untill or unless u invoke parameterize constructor
  ]If you make an instance of child class and invoke parameter constructor then child class parameter constructor execute
  But if u want base class parameter execute then use 
      public MyClass2(int b) : base(b)
  If use static constructor in both the class then
    child static class execute 1st then base class execute
  
  Object instance gives you 'has a' relationship
  inheritance gives you a 'is a' relationship
  
  class Person {
  public void Work(){
  Console.write("It Works ..");
  }
  }
  
  class Employee : Person {
  public void Work(){
  Conole.Writeline("It earns...");
  }
  }
  
  Type        Constructor/value
  Person p1 = new Employee();
  p1.work();
  =>  It Works
  
 Employee e1 = new Employee();
 e1.work();
 => It earns
method overriding
 By default C# takes Base class value
 
 use "virtual" in custom method for base class
  and use "override" in custom method for inheriting class
  
 use "sealed" to stop inheriting from one inerited to another in herited 
 ex : public sealed override work()
 
 We dont use Method overriding so much 
 
 Abstraction Method
 For abstaction we need to defined before class name
 Abstract class Person(){
 public abstract void Work();
 }
 class Toy : Person{
  public override void Work{
    Console.writeLine();
  };
 }
 
 Dont use 'public' access modifier while inheriting  parent class
 we can use this method in any other class just use 'override' in method
 
 Interface
 Abstraction method have some static or default class members method and abstract method
 interface method have all method of interface only , Can't able to define static or default class members
   interface Inte1{
        void method1();
        void method2();
        void same();

};

    interface Inte2 {
        void same();
    }
    class Robo 
    {
        public void m1()
        {
            Console.Write("T i Robo Method");
        }
    }

    class Robo2 : Robo, Inte1, Inte2
    {
        public void method1()
        {
            Console.WriteLine("zz1");
        }

        public void method2()
        {
            Console.WriteLine("zz2");
        }
         void Inte2.same()
        {
            Console.WriteLine("Same 2");
        }
         void Inte1.same()
        {
            Console.WriteLine("Same 1");
        }

    }
    public class Toy
    {
        static void Main(string[] args)
        {
            Robo2 ro = new Robo2();
            ro.method1();
            ro.method2();
            Inte1 in1 = new Robo2();
            in1.same();
            Inte2 in2 = new Robo2();
            in2.same();
            ro.m1();
        }
    }
 
 Sealed Class : you cannot inherit a sealed class
 Partial Class : you can divide a class into parts but at run time they all will combine
 partial class Myclass1{}
 partial class Myclass2{}
 
 Structure : structure are value type while class is reference type
 you can not overrite a variable in struct but you can in class
 
 Enum : It is use to give options to a user 
 
 Regex:
 [a-z] >> a to z
 [a-m] >> a to m
 ^[a-m]$ >> single character only
 ^[a-m]{5}$ >> need 5 character not more or less
 ^[a-m]{1,5}$ >> need character from 1 to 5 characters
 ^[a-mA-Z]{1,5}$ >> involve capital case too
 ^[0-9]{1,5}$ >> take num from 0 to 9
^[A-za-z0-9]{3,20}@[A-Za-z]{3,10}.(com|co.in)$ >> email

Collections 
System.collections
1> Arraylist
It is an Object type

Arraylist list;
list = new ArrayList();
list.Add("xyz");
You can pass any datatype because collections are not bound with datatypes

2> Stack >> last infirst out
Stack stac;
stac = new Stack();
stac.push("Hi");
stack.pop();

3> Queue >> same as array
Queue que;
que = new Quueue();
que.enwueue("jump");
que.dequeue();

4> hashtable >> key value paiir somthing like dictionaryयेंत्त्री
Hashtable ht;
ht = new HashTable();
ht.Add("Key1","Value1");

foreach(DictionaryEntry item in ht){
  Console.WriteLine(item.key + ":" + item.value);
}
 
Generic Collection : You Just type casting the collections 
Stack<int> stc;
Dictionary<int,string> dict;

File Handling
When any file undergoes read and write property it becomes a stream
Static class file
File.Create("location");.Move;.Copy;,Delete;

 
 
 
  
  
